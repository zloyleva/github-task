{"version":3,"sources":["store/actions.js","components/TodoList/index.js","App.js","serviceWorker.js","store/reducers.js","index.js"],"names":["addNewTodo","todo","console","log","type","ACTION_ADD_TODO","payload","setDoneItem","key","ACTION_SET_TODO_DONE","removeItem","ACTION_REMOVE_TODO","TodoList","createTodoListElements","data","_this$props","_this","props","map","el","i","react_default","a","createElement","name","done","onClick","todos","this","Component","connect","state","Object","objectSpread","dispatch","bindActionCreators","App","submitHandler","event","preventDefault","todoText","value","target","reset","_this2","className","action","onSubmit","ref","input","components_TodoList","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","length","undefined","concat","toConsumableArray","index","filter","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ac07a27.chunk.js","sourcesContent":["import {ACTION_ADD_TODO, ACTION_REMOVE_TODO, ACTION_SET_TODO_DONE} from \"../App\";\n\nexport const addNewTodo = (todo) => {\n\tconsole.log(todo);\n\treturn {\n\t\ttype: ACTION_ADD_TODO,\n\t\tpayload: todo\n\t}\n};\n\nexport const setDoneItem = (key) => {\n\treturn {\n\t\ttype: ACTION_SET_TODO_DONE,\n\t\tpayload: key\n\t}\n};\n\nexport const removeItem = (key) => {\n\treturn {\n\t\ttype: ACTION_REMOVE_TODO,\n\t\tpayload: key\n\t}\n};","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\n\nimport {bindActionCreators} from \"redux\";\nimport {setDoneItem, removeItem} from \"../../store/actions\";\n\nclass TodoList extends Component{\n\t\n\trender() {\n\t\tconst {todos} = this.props;\n\t\t\n\t\treturn (\n\t\t\t<ul>\n\t\t\t\t{this.createTodoListElements(todos)}\n\t\t\t</ul>\n\t\t)\n\t}\n\t\n\tcreateTodoListElements = (data) => {\n\t\tconst {setDoneItem,removeItem} = this.props;\n\t\treturn data.map((el, i) => (\n\t\t\t<li key={i}>\n\t\t\t\t{el.name} { el.done?\"DONE\":\"\" }\n\t\t\t\t<button onClick={() => {setDoneItem(i)}}>Done</button>\n\t\t\t\t<button onClick={() => {removeItem(i)}}>Remove</button>\n\t\t\t</li>\n\t\t))\n\t};\n}\n\nconst mapStateToProps = (state) => {\n\treturn {...state};\n};\nconst mapActionsToProps = (dispatch) => {\n\treturn {\n\t\tsetDoneItem: bindActionCreators(setDoneItem, dispatch),\n\t\tremoveItem: bindActionCreators(removeItem, dispatch),\n\t}\n};\n\nexport default connect(mapStateToProps,mapActionsToProps)(TodoList);","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from \"./components/TodoList\";\n\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\n\nimport {addNewTodo} from \"./store/actions\";\n\nexport const ACTION_ADD_TODO = \"ACTION_ADD_TODO\";\nexport const ACTION_SET_TODO_DONE = \"ACTION_SET_TODO_DONE\";\nexport const ACTION_REMOVE_TODO = \"ACTION_REMOVE_TODO\";\n\nconst putPropsToComponent = (state) => {\n\treturn {...state};\n};\nconst putActionsToProps = (dispatch) => {\n\treturn {\n\t\taddNewTodo: bindActionCreators(addNewTodo, dispatch)\n\t}\n};\n\nclass App extends Component {\n  render() {\n    const {addNewTodo,todos} = this.props;\n    return (\n      <div className=\"App\">\n        <form action=\"\" onSubmit={(event) => {\n          this.submitHandler(event, addNewTodo)\n        }}>\n            <input type=\"text\" ref={(input) => this.todoText = input}/>\n            <button>Add todo</button>\n        </form>\n\n        <TodoList todos={todos}/>\n        \n      </div>\n    );\n  }\n  \n  submitHandler = (event,addNewTodo) => {\n\t  event.preventDefault();\n\t  addNewTodo(this.todoText.value);\n\t  event.target.reset();\n  }\n}\n\nexport default connect(putPropsToComponent,putActionsToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ACTION_ADD_TODO, ACTION_REMOVE_TODO, ACTION_SET_TODO_DONE} from \"../App\";\n\nconst initialState = {\n\ttodos: [\n\t\t{name: \"Wake up\", done: false}\n\t]\n};\nexport const reducer = (state=initialState,action) => {\n\t\n\tconsole.log(action);\n\t\n\tswitch (action.type) {\n\t\tcase ACTION_ADD_TODO:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: [...state.todos, {name:action.payload, done: false}]\n\t\t\t};\n\t\tcase ACTION_SET_TODO_DONE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: [...state.todos.map((el, index) => (index === action.payload?{...el, done:true}:el))]\n\t\t\t};\n\t\tcase ACTION_REMOVE_TODO:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: [...state.todos.filter((el, index) => index !== action.payload)]\n\t\t\t};\n\t}\n\t\n\treturn state;\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from \"redux\";\nimport { Provider } from 'react-redux';\n\nimport { reducer } from \"./store/reducers\";\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}